syntax = "proto3";

option java_package = "se.jsannemo.spooky.compiler.ast";

import "google/protobuf/empty.proto";

// A character range in a source file. Lines and columns are 1-indexed, while the offset
// is a zero-indexed byte offset in the entire file. Since Spooky only supports ASCII, this is the same
// as the zero-indexed character offset.
message Pos {
  // The position of the first character in the range.
  int32 line = 1;
  int32 col = 2;
  int32 offset = 3;

  // The position of the last character in the range.
  int32 end_line = 4;
  int32 end_col = 5;
  int32 end_offset = 6;
}

message Program {
  repeated VarDecl globals = 1;
  repeated Func functions = 2;
  repeated FuncDecl externs = 3;
  repeated StructDecl structs = 4;
  // Whether the program is syntactically valid. This can be used to make downstream tools more permissive in allowing
  // e.g. missing required fields in the AST.
  bool valid = 5;
}

message Func {
  FuncDecl decl = 1;
  Statement body = 2;
  Pos position = 3;
}

message FuncDecl {
  Identifier name = 1;
  repeated FuncParam params = 2;
  Type returnType = 3;
  Pos position = 4;
}

message FuncParam {
  Identifier name = 1;
  Type type = 2;
  Pos position = 3;
}

message StructDecl {
  Identifier name = 1;
  repeated StructField fields = 2;
  Pos position = 3;
}

message StructField {
  Identifier name = 1;
  Type type = 2;
  Pos position = 3;
}

message Statement {
  oneof statement {
    Block block = 1;
    Conditional conditional = 2;
    Loop loop = 3;
    VarDecl decl = 4;
    Expr expression = 5;
    ReturnValue returnValue = 6;
  }
  Pos position = 7;
}

message Block {
  repeated Statement body = 1;
  Pos position = 2;
}

message Loop {
  Statement init = 1;
  Expr condition = 2;
  Statement increment = 3;
  Statement body = 4;
  Pos position = 5;
}

message Conditional {
  Expr condition = 1;
  Statement body = 2;
  Statement elseBody = 3;
  Pos position = 4;
}

message VarDecl {
  Identifier name = 1;
  Type type = 2;
  Expr init = 3;
  Pos position = 4;
}

message ReturnValue {
  Expr value = 1;
  Pos position = 2;
}

message Expr {
  oneof expr {
    BinaryExpr binary = 1;
    Value value = 2;
    FuncCall call = 3;
    Identifier reference = 4;
    Ternary conditional = 5;
    Assignment assignment = 6;
    UnaryExpr unary = 7;
    // Field selection in structures.
    Select select = 9;
    // Only used as initializations value for structs.
    StructLit struct = 10;
    // Used to mark that a struct or array should be default initialized.
    DefaultInit default_init = 11;
    // Only used as initializations value for arrays.
    ArrayLit array = 12;
  }
  Pos position = 8;
}

message StructLit {
  repeated FieldInit values = 1;
  Pos position = 2;
}

message ArrayLit {
  // A prefix of the values that should be set for the first dimension.
  repeated Expr values = 1;
  // The value that the array should be padded with if the first is not exhaustive.
  // If unset, the values will not be initialized.
  Expr fill = 2;
  // Used in the AST to mark if explicit fill was requested. This is used to differentiate between a requested fill
  // with a given value and an uninitialized fill (array literal values must explicitly span their entire range).
  bool should_fill = 3;
  Pos position = 4;
}

message DefaultInit {
  Pos position = 1;
}

message FieldInit {
  Identifier field = 1;
  Expr value = 2;
  Pos pos = 3;
}

message Assignment {
  Expr reference = 1;
  Expr value = 2;
  Pos position = 3;
  BinaryOp compound = 4;
}

message Ternary {
  Expr cond = 1;
  Expr left = 2;
  Expr right = 3;
  Pos position = 4;
}

enum BinaryOp {
  BINARY_OP_UNSPECIFIED = 0;
  // Check if left value is smaller than right value.
  LESS_THAN = 2;
  // Check if left value is greater than right value.
  GREATER_THAN = 3;
  // Check if left value is smaller than or equal to the right value.
  LESS_EQUALS = 4;
  // Check if left value is greater than or equal to the right value.
  GREATER_EQUALS = 5;
  // Check if left value is equal to right value.
  EQUALS = 6;
  // Check if left value is not equal to right value.
  NOT_EQUALS = 7;
  // Access array at given index.
  ARRAY_ACCESS = 8;
  // Add the left and right values.
  ADD = 9;
  // Subtract the right from the left value.
  SUBTRACT = 10;
  // Multiply the left and right values
  MULTIPLY = 11;
  // Divide the left value by the right value.
  DIVIDE = 12;
  // Compute the left value modulo the right value.
  MODULO = 13;
  // Compute the logical AND of the two values.
  AND = 14;
  // Compute the logical OR of the two values.
  OR = 15;
}

/** An expression computed using a binary operator on two sub-expressions. */
message BinaryExpr {
  Expr left = 1;
  Expr right = 2;
  BinaryOp operator = 3;
  Pos position = 4;
}

enum UnaryOp {
  UNARY_OP_UNSPECIFIED = 0;
  // Negation of integers.
  NEGATE = 1;
  // Logical negation of booleans.
  NOT = 2;
  // Increment a reference and return the reference itself.
  PREFIX_INCREMENT = 3;
  // Decrement a reference and return the reference itself.
  PREFIX_DECREMENT = 4;
  // Increment a reference and return the value before incrementing.
  POSTFIX_INCREMENT = 5;
  // Decrement a reference and return the value before incrementing.
  POSTFIX_DECREMENT = 6;
}

/** An expression computed using a binary operator on two sub-expressions. */
message UnaryExpr {
  Expr expr = 1;
  UnaryOp operator = 2;
  Pos position = 3;
}

message Value {
  oneof literal {
    bool bool_literal = 1;
    int32 int_literal = 2;
    string string_literal = 3;
    int32 char_literal = 4;
  }
  Pos position = 5;
}

message FuncCall {
  Identifier function = 1;
  Expr called_on = 2;
  repeated Expr params = 3;
  Pos position = 4;
}

message Select {
  Expr called_on = 1;
  Identifier field = 2;
  Pos position = 3;
}

message Identifier {
  string name = 1;
  Pos position = 2;
}

message Type {
  string name = 1;
  repeated ArrayDimension dimensions = 2;
  Pos position = 3;

  message ArrayDimension {
    oneof dim {
      int32 dimension = 1;
      google.protobuf.Empty inferred = 2;
    }
    Pos position = 3;
  }
}

message Token {
  Kind kind = 1;
  Pos position = 2;
  string text = 3;

  enum Kind {
    KIND_UNSPECIFIED = 0;
    // Operators etc.
    ASSIGN = 1;
    EQUALS = 2;
    NOT_EQUALS = 3;
    LESS = 4;
    LESS_EQUALS = 5;
    GREATER_EQUALS = 6;
    GREATER = 7;
    AND = 8;
    OR = 9;
    DOT = 10;
    COMMA = 11;
    EXCLAIM = 12;
    QUESTION = 13;
    PLUS = 14;
    PLUS_EQUALS = 15;
    MINUS = 16;
    MINUS_EQUALS = 17;
    ASTERISK = 18;
    TIMES_EQUALS = 19;
    SLASH = 20;
    DIV_EQUALS = 21;
    PERCENT = 22;
    MOD_EQUALS = 49;
    ARROW = 23;
    LBRACKET = 24;
    RBRACKET = 25;
    LBRACE = 26;
    RBRACE = 27;
    LPAREN = 28;
    RPAREN = 29;
    COLON = 30;
    SEMICOLON = 31;
    INCREMENT = 51;
    DECREMENT = 52;
    ELLIPSIS = 54;
    // Keywords
    ELSE = 32;
    EXTERN = 33;
    FALSE = 34;
    FOR = 35;
    FUNC = 36;
    IF = 37;
    RETURN = 38;
    TRUE = 39;
    WHILE = 40;
    STRUCT = 50;
    DEFAULT = 53;
    // Literals, identifiers
    IDENTIFIER = 41;
    INT_LIT = 42;
    STRING_LIT = 43;
    UNTERMINATED_STRING_LIT = 44;
    CHAR_LIT = 45;
    UNTERMINATED_CHAR_LIT = 46;
    // Special
    EOF = 47;
    UNEXPECTED = 48;
    // Next: 55
  }
}


