syntax = "proto3";

option java_package = "se.jsannemo.spooky.compiler";
option java_outer_classname = "Prog";

message Program {
  repeated Type globals = 1;
  repeated Func functions = 2;
}

message Func {
  repeated Type variables = 1;
  repeated Type params = 2;
  Type returnType = 3;
  Scope body = 4;
}

message Scope {
  repeated Statement body = 1;
}

message Statement {
  oneof statement {
    Scope block = 1;
    Conditional conditional = 2;
    Loop loop = 3;
    Expr expression = 4;
    Returns returnValue = 5;
    Halt halt = 6;
  }
}

message Returns {
  Expr returnValue = 1;
}

message Halt {
}

message Loop {
  Expr condition = 1;
  Scope body = 2;
}

message Conditional {
  Expr condition = 1;
  Scope body = 2;
  Scope elseBody = 3;
}

message VarRef {
  oneof ref {
    int32 function_index = 1;
    int32 function_param = 2;
    int32 global_index = 3;
  }
}

message Expr {
  oneof expr {
    BinaryExpr binary = 1;
    Constant constant = 2;
    FuncCall call = 3;
    ExternCall extern = 10;
    VarRef reference = 4;
    Ternary conditional = 5;
    Assignment assignment = 6;
    UnaryExpr unary = 7;
    Select select = 8;
  }
  Type type = 9;
}

message Select {
  Expr value = 1;
  int32 field = 2;
}

message Assignment {
  VarRef variable = 1;
  Expr value = 2;
}

message Ternary {
  Expr cond = 1;
  Expr left = 2;
  Expr right = 3;
}

enum BinaryOp {
  BINARY_OP_UNSPECIFIED = 0;
  // Check if left value is smaller than right value.
  LESS_THAN = 2;
  // Check if left value is greater than right value.
  GREATER_THAN = 3;
  // Check if left value is smaller than or equal to the right value.
  LESS_EQUALS = 4;
  // Check if left value is greater than or equal to the right value.
  GREATER_EQUALS = 5;
  // Check if left value is equal to right value.
  EQUALS = 6;
  // Check if left value is not equal to right value.
  NOT_EQUALS = 7;
  // Access array at given index.
  ARRAY_ACCESS = 8;
  // Add the left and right values.
  ADD = 9;
  // Subtract the right from the left value.
  SUBTRACT = 10;
  // Multiply the left and right values
  MULTIPLY = 11;
  // Divide the left value by the right value.
  DIVIDE = 12;
  // Compute the left value modulo the right value.
  MODULO = 13;
  // Compute the logical AND of the two values.
  AND = 14;
  // Compute the logical OR of the two values.
  OR = 15;
}

/** An expression computed using a binary operator on two sub-expressions. */
message BinaryExpr {
  Expr left = 1;
  Expr right = 2;
  BinaryOp operator = 3;
}

enum UnaryOp {
  UNARY_OP_UNSPECIFIED = 0;
  NEGATE = 1;
  NOT = 2;
}

/** An expression computed using a binary operator on two sub-expressions. */
message UnaryExpr {
  Expr expr = 1;
  UnaryOp operator = 2;
}

message Constant {
  oneof constant {
    bool bool_const = 1;
    int32 int_const = 2;
    string string_const = 3;
    int32 char_const = 4;
  }
}

message FuncCall {
  int32 function = 1;
  repeated Expr params = 2;
}

message ExternCall {
  string name = 1;
  repeated Expr params = 2;
}

message Type {
  oneof type {
    Builtin builtin = 1;
    Struct struct = 2;
    Type array = 3;
  }

  enum Builtin {
    BUILTIN_UNSPECIFIED = 0;
    INT = 1;
    CHAR = 2;
    BOOLEAN = 3;
    STRING = 4;
    VOID = 5;
    ERROR = 6;
  }

  message Struct {
    repeated Type fields = 1;
  }
}