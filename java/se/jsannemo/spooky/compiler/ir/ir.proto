syntax = "proto3";

option java_package = "se.jsannemo.spooky.compiler";
option java_outer_classname = "Ir";

message Program {
  repeated Type global_slots = 1;
  repeated Constant constants = 2;
  repeated Func functions = 3;
}

message Type {
  oneof storage {
    Scalar scalar = 1;
    Struct struct = 2;
    Array array = 3;
    Type prefix_array = 4;
    Type pointer = 5;
  }
}

enum Scalar {
  STORAGE_UNSPECIFIED = 0;
  INT = 1;
}

message Struct {
  repeated Type fields = 1;
}

message Array {
  Type type = 1;
  int32 size = 2;
}

message Constant {
  oneof value {
    int32 int = 1;
    Array unprefixed_array = 2;
    Array prefixed_array = 3;
  }
  message Array {
    repeated int32 values = 1;
  }
}

message Func {
  int32 param_slots = 1;
  repeated Type slots = 2;
  Type returnType = 3;
  // Block [0] is the entry block
  repeated Block blocks = 4;
}

message Ref {
  oneof slot {
    Constant constant = 1;
    int32 function = 2;
    int32 global = 3;
    ArrayOffset array = 4;
    StructOffset struct = 5;
    Ref pointer = 6;
  }
  message ArrayOffset {
    Ref array = 1;
    Ref offset = 2;
  }
  message StructOffset {
    Ref struct = 1;
    int32 offset = 2;
  }
}

message Block {
  repeated Op body = 1;
}

message Op {
  oneof op {
    Jump jmp = 1;
    Extern extern = 2;
    Call call = 3;
    Binary binary = 4;
    Unary unary = 5;
    Return return = 6;
    Halt halt = 7;
  }
}

message Jump {
  Ref cond_slot = 1; // If empty, the jump is unconditional.
  Block if_true = 2;
  Block if_false = 3;
}

message Extern {
  string name = 1;
  repeated Ref params = 2;
}

message Call {
  string name = 1;
  repeated Ref params = 2;
}

message Binary {
  Ref a = 1;
  Ref b = 2;
  Ref target = 3;
  enum Op {
    OP_UNSPECIFIED = 0;
    ADD = 1;
    SUB = 2;
    MUL = 3;
    DIV = 4;
    MOD = 5;
    AND = 6;
    OR = 7;
    EQ = 8;
    NEQ = 9;
    LESS = 10;
    LEQ = 11;
  }
}

message Unary {
  Ref a = 1;
  Ref target = 2;
  enum Op {
    OP_UNSPECIFIED = 0;
    NEGATE = 1;
    NOT = 2;
    ADDRESS = 3;
    DEREFERENCE = 4;
  }
}

message Return {
  Ref return_slot = 1;
}

message Halt {
}

