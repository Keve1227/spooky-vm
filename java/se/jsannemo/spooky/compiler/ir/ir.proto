syntax = "proto3";

option java_package = "se.jsannemo.spooky.compiler.ir";

message Statement {
  oneof statement {
    Label label = 1;
    Halt halt = 2;
    Extern extern = 3;
    Call call = 4;
    Store store = 5;
    StoreLabel store_label = 6;

    Add add = 7;
    Mul mul = 8;
    Div div = 9;
    Sub sub = 10;
    Mod mod = 11;
    Copy copy = 12;

    JmpZero jmp_zero = 13;
    JmpNZero jmp_nzero = 14;
    JmpAdr jmp_addr = 15;
    Jmp jmp = 16;

    LessThan less_than = 17;
    LessEquals less_equals = 18;
    Equals equals = 19;
    NotEquals not_equals = 20;

    BitAnd bit_and = 21;
    BitOr bit_or = 22;
  }
}

message Label {
  int32 label = 1;
}

message Halt {
}

message Extern {
  string name = 1;
  int32 spOffset = 2;
}

message Call {
  string name = 1;
  int32 spOffset = 2;
  Label label = 3;
}

message JmpZero {
  Label label = 1;
  Addr flag = 2;
}

message JmpNZero {
  Label label = 1;
  Addr flag = 2;
}

message Jmp {
  Label label = 1;
}

message JmpAdr {
  Addr addr = 1;
}

message Store {
  Addr addr = 1;
  int32 value = 2;
}

message StoreLabel {
  Addr addr = 1;
  Label label = 2;
}

message Add {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message Sub {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message Mul {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message Div {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message Mod {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message LessThan {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message LessEquals {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message BitOr {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message BitAnd {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message Equals {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message NotEquals {
  Addr a = 1;
  Addr b = 2;
  Addr result = 3;
}

message Copy {
  Addr from = 1;
  Addr to = 2;
}

message Addr {
  oneof addr {
    int32 relSp = 1;
    int32 absData = 2;
    int32 absStack = 3;
  }
}

message IpAddr {
  oneof addr {
    int32 absText = 1;
  }
}

message Value {
  Type type = 1;
  Addr address = 2;
}

message Type {
  string baseType = 1;
  string typeCheckType = 2;
  int32 dim = 3;
}
